{% set name = "opty" %}
{% set version = "1.1.0" %}
{% set sha256 = "2551437a546da4739448247c189c2a8c9b58da86409f0e73edea21b2d918d58f" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 1
  script: {{ PYTHON }} -m pip install . -vv
requirements:
  host:
    - pip
    - python
    - setuptools
  run:
    - cyipopt >=0.1.7  # [unix]
    - cyipopt >=0.3.0  # [win]
    - cython >=0.20.1
    - numpy >=1.8.1
    - python
    - scipy >=0.14.1
    - setuptools
    - sympy >=1.0.0

test:
  requires:
    - {{ compiler('c') }}
  imports:
    - opty
    - opty.direct_collocation
    - opty.parameter_identification
    - opty.utils
    - opty.tests
  files:
    - betts2003.py
    - helloworld.pyx
    - test_setup.py
  commands:
    - which python  # [unix]
    # NOTE : Try to build a simple Cython extension. ufuncify_matrix() does not
    # seem to print error info on this command with subprocess.call() and this
    # sample gives better feedback until ufuncify_matrix() is improved.
    - python test_setup.py build_ext --inplace
    - python -c "from opty.tests.test_utils import test_ufuncify_matrix;test_ufuncify_matrix()"  # [unix]
    - python betts2003.py

about:
  home: http://github.com/csu-hmc/opty
  license: BSD-2-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Tools for optimizing dynamic systems using direct collocation.
  description: |
    opty utilizes symbolic descriptions of ordinary differential equations
    expressed with SymPy to form the constraints needed to solve optimal
    control and parameter identification problems using the direct collocation
    method and non-linear programming. In general, if one can express the
    continuous first order ordinary differential equations of the system as
    symbolic expressions opty will automatically generate a function to
    efficiently evaluate the dynamical constraints and a function that
    evaluates the sparse Jacobian of the constraints, which have been optimized
    for speed and memory consumption. The translation of the dynamical system
    description to the NLP form, primarily the formation of the constraints and
    the Jabcobian of the constraints, manually is a time consuming and error
    prone process. opty eliminates both of those issues.
  dev_url: http://github.com/csu-hmc/opty

extra:
  recipe-maintainers:
    - moorepants
